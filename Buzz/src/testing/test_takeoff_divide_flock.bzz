include "string.bzz"

########################################
#
# MISCELLANEOUS CONSTANTS
#
########################################

TARGETDIST_VSTIG = 2
ROBOTS           = 100 # this must match the number of robots in the swarm
DISTANCE_MAX     = 60000.

########################################
#
# FLOCKING-RELATED FUNCTIONS
#
########################################

#
# Constants
#
TARGET_KIN     = 100.
EPSILON_KIN    = 100.
TARGET_NONKIN  = 300.
EPSILON_NONKIN = 250.

#
# Lennard-Jones interaction magnitude
#
function calc_lj(dist, target, epsilon) {
  return -(epsilon / dist) * ((target / dist)^4 - (target / dist)^2)
}

#

#
function to_lj_kin(rid, data) {
  var lj
  lj = calc_lj(data.distance, TARGET_KIN, EPSILON_KIN)
  data.x = lj * math.cos(data.azimuth)
  data.y = lj * math.sin(data.azimuth)
  return data
}

#
# Neighbor data to non-kin LJ interaction
#
function to_lj_nonkin(rid, data) {
  var lj
  lj = calc_lj(data.distance, TARGET_NONKIN, EPSILON_NONKIN)
  data.x = lj * math.cos(data.azimuth)
  data.y = lj * math.sin(data.azimuth)
  return data
}

#
# Accumulator of neighbor LJ interactions
#
function vec2_sum(rid, data, accum) {
  accum.x = accum.x + data.x
  accum.y = accum.y + data.y
  return accum
}

#
# Actual flocking logic
#
function flock() {
  # Create accumulator
  var accum = {}
  accum.x = 0
  accum.y = 0
  # Calculate accumulator
  accum = neighbors.kin().map(to_lj_kin).reduce(vec2_sum, accum)
  accum = neighbors.nonkin().map(to_lj_nonkin).reduce(vec2_sum, accum)
  if(neighbors.count() > 0) {
    accum.x = accum.x / neighbors.count()
    accum.y = accum.y / neighbors.count()
  }
  # Move according to vector
  goto(accum.x, accum.y)
}

########################################
#
# BARRIER-RELATED FUNCTIONS
#
########################################

#
# Constants
#
BARRIER_VSTIG = 1

#
# Sets a barrier
#
function barrier_set(threshold, transf) {
  statef = function() {
    barrier_wait(threshold, transf);
  }
  barrier = stigmergy.create(BARRIER_VSTIG)
  statestr = "barrier"
}

#
# Make yourself ready
#
function barrier_ready() {
  barrier.put(id, 1)
}

#
# Executes the barrier
#
function barrier_wait(threshold, transf) {
  barrier.get(id)
  extradbg = barrier.size()
  if(barrier.size() >= threshold) {
    barrier = nil
    transf()
  }
}

########################################
#
# COLOR-RELATED FUNCTIONS
#
########################################

#
# Constants
#
TARGET_NOCOLOR = 0
TARGET_RED     = 1
TARGET_GREEN   = 2
TARGET_BLUE    = 3

function isred(c) {
  return (c.red == 255 and c.green == 0 and c.blue == 0)
}

function isgreen(c) {
  return (c.red == 0 and c.green == 255 and c.blue == 0)
}

function isblue(c) {
  return (c.red == 0 and c.green == 0 and c.blue == 255)
}

function color_to_code(c) {
  if(isred(c))   return TARGET_RED
  if(isgreen(c)) return TARGET_GREEN
  if(isblue(c))  return TARGET_BLUE
  return TARGET_NOCOLOR
}

########################################
#
# STATE-RELATED FUNCTIONS
#
########################################

#
# Take-off state function
#
function state_takeoff() {
  if(not takeoff()) {
    barrier_set(ROBOTS, transition_to_search_for_target)
    barrier_ready()
  }
}

#
# Transition to search for target state function
#
function transition_to_search_for_target() {
  statef = state_search_for_target
  statestr = "search_for_target"
  yaw_start = pose.orientation.yaw % (2. * math.pi)
  camera_enable()
  mytargetdata = {}
  mytargetdata.dist = DISTANCE_MAX
  mytargetdata.color = TARGET_NOCOLOR
  mytargetdata.closest = nil
}

#
# Search for target state function
#
function state_search_for_target() {
  # Can I see any object?
  if(size(blobs) == 0) {
    # No object in sight
    var cur_yaw = pose.orientation.yaw % (2. * math.pi)
    var yaw_diff = (cur_yaw - yaw_start) % (2. * math.pi)
    if(yaw_diff >= (0.95 * 2. * math.pi)) {
      # Made a complete turn and no object found, give up
      barrier_set(ROBOTS, transition_to_pick_target)
      barrier_ready()
    }
    else
      # Rotate on the spot to look for target objects
      rotate(math.pi / 180.0)
  }
  else {
    # Pick the first object you see and rotate to center it
    rotate(0.0)
    if(blobs[0].px > 330)
      rotate(-math.pi / 180.0)
    else if(blobs[0].px < 310)
      rotate( math.pi / 180.0)
    else {
      # Now pointing to the object, wait for others
      mytargetdata.dist = 0.
      mytargetdata.color = color_to_code(blobs[0].color)
      barrier_set(ROBOTS, transition_to_pick_target)
      barrier_ready()
    }
  }
}

#
# Transition to pick target state function
#
function transition_to_pick_target() {
  statef = state_pick_target
  statestr = "pick_target"
  targetdist = stigmergy.create(TARGETDIST_VSTIG)
  if(mytargetdata.dist < DISTANCE_MAX) {
    # I saw the target
    # Put an entry about my distance in the vstig
    targetdist.put(id, mytargetdata)
    # Wait to get to the next state
    barrier_set(ROBOTS, transition_to_divide)
    barrier_ready()
  }
}

#
# Pick target state function
#
function state_pick_target() {
  # Go through the neighbors and, for each, check its distance to the target
  # Keep the neighbor with the shortest distance to the target
  # Also, we're done when all neighbors have made a choice
  var params = {}
  params.dist    = mytargetdata.dist
  params.color   = mytargetdata.color
  params.closest = mytargetdata.closest
  params = neighbors.reduce(
    function(rid, rdata, accum) {
      var d = targetdist.get(rid)
      if(d != nil) {
        if(accum.dist > rdata.distance + d.dist) {
          accum.dist    = rdata.distance + d.dist
          accum.closest = rid
          accum.color   = d.color
        }
      }
      return accum
    },
    params
  )
  # Advertise your choice
  mytargetdata.closest = params.closest
  mytargetdata.color   = params.color
  mytargetdata.dist    = params.dist
  targetdist.put(id, mytargetdata)
  if(params.dist < DISTANCE_MAX) {
    # Move to the next state
    barrier_set(ROBOTS, transition_to_divide)
    barrier_ready()
  }
  else {
    # Check if we have info on the closest robot
    if(mytargetdata.closest) {
      # Yes, rotate towards it
      var n = neighbors.get(mytargetdata.closest)
      if(n.azimuth > math.pi / 36.0) {
        rotate(math.pi / 360.0)
      }
      else if(n.azimuth < -math.pi / 36.0)
        rotate(-math.pi / 360.0)
    }
  }
}

#
# Transition to divide state function
#
function transition_to_divide() {
  statef = state_divide
  statestr = "divide"
  sred = swarm.create(TARGET_RED)
  sred.select(mytargetdata.color == TARGET_RED)
  sblue = swarm.create(TARGET_BLUE)
  sblue.select(mytargetdata.color == TARGET_BLUE)
}

#
# Pick target state function
#
function state_divide() {
  sred.exec(flock)
  sblue.exec(flock)
}

#
# Transition to go to target state function
#
function transition_to_goto_target() {
  statef = state_goto_target
  statestr = "goto_target"
}

#
# Go to target state function
#
function state_goto_target() {
}

########################################
#
# ARGoS HOOKS
#
########################################

#
# Executed at init time
#
function init() {
  # Set initial state
  statef = state_takeoff
  statestr = "takeoff"
}

#
# Executed at each time step
#
function step() {
  extradbg = ""
  statef()
  debug.print(statestr, ": ", extradbg)
}

#
# Executed at the experiment end
#
function destroy() {
}
